# localization.py (v25.0 - Final Version with Explanations)

loc_strings = {
    "en": {
        "app_title": "AI Datacenter Business Simulator",
        "app_subtitle": "A strategic tool to analyze the real-world P&L of AI services.",
        "model_clarification": "Note: The core financial model (Sections 1, 2, 4) is based on a **usage-based pricing system** to show the full potential of the selected strategy.",
        "sidebar_guide_title": "📖 How to Use",
        "sidebar_guide_text": "Adjust the variables below and click 'Run Analysis' to see the financial forecast.",
        "copyright_text": "© 2025, Oh Sunghwan. All rights reserved.",
        "contact_text": "Contact: hawn21@gmail.com",
        "lang_selector": "Language",
        "dc_capacity": "Data Center Size (MW)",
        "high_perf_gpu_ratio": "High-Performance GPU Budget Ratio (%)",
        "utilization_rate": "Datacenter Average Utilization Rate (%)",
        "power_type": "Power Source",
        # [MODIFIED]
        "apply_mirrormind_label": "Apply Intelligent Architecture (e.g., MirrorMind)",
        "apply_mirrormind_help": "This technology applies a superior control architecture to the LLM, achieving higher token processing efficiency (increased throughput) with the same hardware. This boosts the potential for total revenue and profit, enabling investment recovery with a more competitive (lower) recommended pricing.",
        "market_price": "Market Price per 1M Tokens ($)",
        "run_button": "🚀 Run Analysis",
        "initial_prompt": "Set your scenario variables in the sidebar and click 'Run Analysis'.",
        "section_1_title": "1. Core Business Potential & Cash Flow (Annual)",
        "assumptions_title": "Key Assumptions & Capacity",
        "assump_gpu_mix": "GPU Configuration",
        "assump_utilization": "Utilization Rate",
        "assump_tokens": "Tokens Serviced (Trillion)",
        "pnl_revenue": "Revenue",
        "pnl_cost_of_revenue": "Cost of Revenue",
        "pnl_gross_profit": "Gross Profit",
        "pnl_sg_and_a": "  - SG&A",
        "pnl_d_and_a": "  - D&A (DC & HW)",
        "pnl_rd_amortization": "  - R&D Amortization",
        "pnl_operating_profit": "Operating Profit",
        "section_2_title": "2. P&L by Customer Segment (Per User, Monthly)",
        "tier_free": "Free Users",
        "tier_standard": "Paid Users",
        "tier_premium": "Premium Users",
        "narrative_users": "Number of Users",
        "narrative_revenue_per_user": "Usage-Based Revenue",
        "narrative_cost_per_user": "Cost per User",
        "narrative_profit_per_user": "Usage-Based Profit",
        "sidebar_pricing_title": "💰 Pricing Strategy (for Section 3)",
        "pricing_standard_fee": "Standard Tier Monthly Fee ($)",
        "pricing_premium_fee": "Premium Tier Monthly Fee ($)",
        "section_3_title": "3. 'What-If' Analysis: Fixed-Fee Pricing",
        "narrative_pricing_title": "Analysis for",
        "narrative_fixed_fee_revenue": "Fixed-Fee Revenue",
        "narrative_opportunity_cost": "Opportunity Cost (vs. Usage-Based)",
        "narrative_new_profit_per_user": "New Profit (Fixed-Fee)",
        "section_4_title": "4. Final Summary & Payback Analysis",
        "payback_analysis_intro": "Based on the current strategy, the realistic payback period is calculated as follows:",
        "annual_cash_flow": "Annual Operating Cash Flow (Profit + D&A)",
        "calculated_payback_period": "Calculated Payback Period (Years)",
        "recommendation_title": "Reference: Recommended Pricing for 5-Year Target",
        "recommendation_intro": "To achieve a 5-year payback, the following monthly pricing is recommended:",
        "recommended_standard_fee": "Recommended Standard Fee",
        "recommended_premium_fee": "Recommended Premium Fee",
        "recommendation_unachievable": "With the current cost structure, achieving a 5-year payback is not feasible. If the calculated payback period above is longer than your target, a fundamental review of the hardware or architectural strategy is required.",
        # [NEW]
        "arch_explanation_title": "What is an Intelligent Architecture?",
        "arch_explanation_text": "It's an approach that maximizes performance-to-cost by designing a superior system to efficiently control and utilize the LLM, rather than simply increasing the LLM model's size. The efficiency gains in this simulator are based on the mathematical proof of the **MirrorMind architecture**.\\n\\n- [View MirrorMind Efficiency Proof Paper](https://github.com/HWAN-OH/H2-Energy-for-AI-DC-Mix-Simulator/blob/main/paper/A%20Mathematical%20Proof%20of%20the%20Computational%20and%20Energy%20Efficiency%20of%20the%20MirrorMind%20Architecture.pdf)"
    },
    "ko": {
        "app_title": "AI 데이터센터 사업성 시뮬레이터",
        "app_subtitle": "AI 서비스의 현실적인 손익(P&L)을 분석하는 전략 도구입니다.",
        "model_clarification": "참고: 아래 재무 모델(섹션 1, 2, 4)은 선택된 전략의 최대 잠재력을 보여주기 위해 **사용량 기반 요금제**를 기준으로 분석합니다.",
        "sidebar_guide_title": "📖 사용 방법",
        "sidebar_guide_text": "아래 변수를 조절하고 '분석 실행'을 클릭하여 재무 예측을 확인하세요.",
        "copyright_text": "© 2025, Oh Sunghwan. All rights reserved.",
        "contact_text": "문의: hawn21@gmail.com",
        "lang_selector": "언어",
        "dc_capacity": "데이터센터 용량 (MW)",
        "high_perf_gpu_ratio": "고성능 GPU 예산 비중 (%)",
        "utilization_rate": "데이터센터 평균 가동률 (%)",
        "power_type": "전력 종류",
        # [MODIFIED]
        "apply_mirrormind_label": "지능형 아키텍처 적용 (예: MirrorMind)",
        "apply_mirrormind_help": "LLM을 제어하는 상위 아키텍처를 적용하여, 동일 하드웨어에서 더 높은 토큰 처리 효율(처리량 증가)을 달성하는 기술입니다. 이는 총 매출 및 이익 잠재력을 높이고, 더 낮은 권장 요금으로도 투자 회수가 가능하게 만듭니다.",
        "market_price": "토큰당 시장 판매가 ($ / 1M)",
        "run_button": "🚀 분석 실행",
        "initial_prompt": "사이드바에서 시나리오 변수를 설정한 후 '분석 실행' 버튼을 눌러 결과를 확인하세요.",
        "section_1_title": "1. 핵심 사업 잠재력 및 현금흐름 (연간)",
        "assumptions_title": "주요 가정 및 생산량",
        "assump_gpu_mix": "그래픽카드 구성",
        "assump_utilization": "평균 가동률",
        "assump_tokens": "처리 토큰 총량 (조)",
        "pnl_revenue": "매출",
        "pnl_cost_of_revenue": "매출원가",
        "pnl_gross_profit": "매출총이익",
        "pnl_sg_and_a": "  - 판매관리비",
        "pnl_d_and_a": "  - 감가상각비 (DC, HW)",
        "pnl_rd_amortization": "  - 무형자산상각비 (R&D)",
        "pnl_operating_profit": "영업이익",
        "section_2_title": "2. 고객 그룹별 손익 분석 (인당, 월간)",
        "tier_free": "무료 사용자",
        "tier_standard": "유료 사용자",
        "tier_premium": "프리미엄 사용자",
        "narrative_users": "사용자 수",
        "narrative_revenue_per_user": "사용량 기반 매출",
        "narrative_cost_per_user": "인당 원가",
        "narrative_profit_per_user": "사용량 기반 이익",
        "sidebar_pricing_title": "💰 요금제 전략 설정 (섹션 3 분석용)",
        "pricing_standard_fee": "유료 사용자 월 요금 ($)",
        "pricing_premium_fee": "프리미엄 사용자 월 요금 ($)",
        "section_3_title": "3. 'What-If' 분석: 고정 요금제 적용 시",
        "narrative_pricing_title": "분석 대상",
        "narrative_fixed_fee_revenue": "고정 요금제 매출",
        "narrative_opportunity_cost": "기회비용 (vs 사용량 기반)",
        "narrative_new_profit_per_user": "최종 이익 (고정 요금제)",
        "section_4_title": "4. 최종 요약 및 투자 회수 기간 분석",
        "payback_analysis_intro": "현재 전략을 기준으로, 현실적인 투자 회수 기간은 다음과 같이 계산됩니다:",
        "annual_cash_flow": "연간 영업 현금흐름 (영업이익 + 감가상각비)",
        "calculated_payback_period": "계산된 투자 회수 기간 (년)",
        "recommendation_title": "참고: '5년 회수' 목표 달성을 위한 권장 요금",
        "recommendation_intro": "총 투자금을 5년 내에 회수하기 위해, 다음과 같은 월간 요금제를 제안합니다:",
        "recommended_standard_fee": "권장 유료 요금",
        "recommended_premium_fee": "권장 프리미엄 요금",
        "recommendation_unachievable": "현재 비용 구조에서는 5년 내 투자금 회수가 현실적으로 어렵습니다. 위 계산된 회수 기간이 목표보다 길 경우, 하드웨어 또는 아키텍처 전략의 근본적인 재검토가 필요합니다.",
        # [NEW]
        "arch_explanation_title": "지능형 아키텍처(Intelligent Architecture)란?",
        "arch_explanation_text": "단순히 LLM 모델의 크기를 키우는 대신, LLM을 효율적으로 제어하고 활용하는 상위 시스템을 설계하여 비용 대비 성능을 극대화하는 접근 방식입니다. 이 시뮬레이터의 효율성 증가는 **MirrorMind 아키텍처**의 수학적 증명에 기반합니다.\\n\\n- [MirrorMind 효율성 증명 논문 보기](https://github.com/HWAN-OH/H2-Energy-for-AI-DC-Mix-Simulator/blob/main/paper/A%20Mathematical%20Proof%20of%20the%20Computational%20and%20Energy%20Efficiency%20of%20the%20MirrorMind%20Architecture.pdf)"
    }
}

def t(key, lang="ko", **kwargs):
    # Use replace to handle markdown newlines
    return loc_strings.get(lang, {}).get(key, key).format(**kwargs).replace('\\n', '\n')
